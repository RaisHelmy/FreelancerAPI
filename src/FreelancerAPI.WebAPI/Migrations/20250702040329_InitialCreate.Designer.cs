// <auto-generated />
using System;
using FreelancerAPI.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FreelancerAPI.WebAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250702040329_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FreelancerAPI.Domain.Entities.Freelancer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("Username");

                    b.ToTable("Freelancers");
                });

            modelBuilder.Entity("FreelancerAPI.Domain.Entities.FreelancerHobby", b =>
                {
                    b.Property<int>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<int>("HobbyId")
                        .HasColumnType("int");

                    b.HasKey("FreelancerId", "HobbyId");

                    b.HasIndex("HobbyId");

                    b.ToTable("FreelancerHobbies");
                });

            modelBuilder.Entity("FreelancerAPI.Domain.Entities.FreelancerSkillset", b =>
                {
                    b.Property<int>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<int>("SkillsetId")
                        .HasColumnType("int");

                    b.HasKey("FreelancerId", "SkillsetId");

                    b.HasIndex("SkillsetId");

                    b.ToTable("FreelancerSkillsets");
                });

            modelBuilder.Entity("FreelancerAPI.Domain.Entities.Hobby", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Hobbies");
                });

            modelBuilder.Entity("FreelancerAPI.Domain.Entities.Skillset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skillsets");
                });

            modelBuilder.Entity("FreelancerAPI.Domain.Entities.FreelancerHobby", b =>
                {
                    b.HasOne("FreelancerAPI.Domain.Entities.Freelancer", "Freelancer")
                        .WithMany("FreelancerHobbies")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FreelancerAPI.Domain.Entities.Hobby", "Hobby")
                        .WithMany("FreelancerHobbies")
                        .HasForeignKey("HobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("Hobby");
                });

            modelBuilder.Entity("FreelancerAPI.Domain.Entities.FreelancerSkillset", b =>
                {
                    b.HasOne("FreelancerAPI.Domain.Entities.Freelancer", "Freelancer")
                        .WithMany("FreelancerSkillsets")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FreelancerAPI.Domain.Entities.Skillset", "Skillset")
                        .WithMany("FreelancerSkillsets")
                        .HasForeignKey("SkillsetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("Skillset");
                });

            modelBuilder.Entity("FreelancerAPI.Domain.Entities.Freelancer", b =>
                {
                    b.Navigation("FreelancerHobbies");

                    b.Navigation("FreelancerSkillsets");
                });

            modelBuilder.Entity("FreelancerAPI.Domain.Entities.Hobby", b =>
                {
                    b.Navigation("FreelancerHobbies");
                });

            modelBuilder.Entity("FreelancerAPI.Domain.Entities.Skillset", b =>
                {
                    b.Navigation("FreelancerSkillsets");
                });
#pragma warning restore 612, 618
        }
    }
}
